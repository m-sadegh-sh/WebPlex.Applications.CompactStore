// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
#pragma warning disable 1591, 3008, 3009, 0108
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace WebPlex.Applications.CompactStore.Controllers
{
    public partial class ProductController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ProductController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult List()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ListByCategory()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListByCategory);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Details()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Details);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ProductController Actions { get { return MVC.Product; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Product";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Product";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string List = "List";
            public readonly string ListByCategory = "ListByCategory";
            public readonly string Details = "Details";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string List = "List";
            public const string ListByCategory = "ListByCategory";
            public const string Details = "Details";
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List
        {
            public readonly string query = "query";
            public readonly string order = "order";
            public readonly string direction = "direction";
            public readonly string page = "page";
            public readonly string size = "size";
        }
        static readonly ActionParamsClass_ListByCategory s_params_ListByCategory = new ActionParamsClass_ListByCategory();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListByCategory ListByCategoryParams { get { return s_params_ListByCategory; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListByCategory
        {
            public readonly string categorySlug = "categorySlug";
            public readonly string query = "query";
            public readonly string order = "order";
            public readonly string direction = "direction";
            public readonly string page = "page";
            public readonly string size = "size";
        }
        static readonly ActionParamsClass_Details s_params_Details = new ActionParamsClass_Details();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Details DetailsParams { get { return s_params_Details; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Details
        {
            public readonly string categorySlug = "categorySlug";
            public readonly string productSlug = "productSlug";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Details = "_Details";
                public readonly string _List = "_List";
                public readonly string Details = "Details";
                public readonly string List = "List";
            }
            public readonly string _Details = "~/Views/Product/_Details.cshtml";
            public readonly string _List = "~/Views/Product/_List.cshtml";
            public readonly string Details = "~/Views/Product/Details.cshtml";
            public readonly string List = "~/Views/Product/List.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ProductController : WebPlex.Applications.CompactStore.Controllers.ProductController
    {
        public T4MVC_ProductController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string query, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortOrder> order, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortDirection> direction, int? page, int? size);

        [NonAction]
        public override System.Web.Mvc.ActionResult List(string query, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortOrder> order, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortDirection> direction, int? page, int? size)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
		if (query != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "query", query);
		if (order != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "order", order);
		if (direction != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "direction", direction);
		if (page != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
		if (size != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "size", size);
            ListOverride(callInfo, query, order, direction, page, size);
            return callInfo;
        }

        [NonAction]
        partial void ListByCategoryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string categorySlug, string query, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortOrder> order, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortDirection> direction, int? page, int? size);

        [NonAction]
        public override System.Web.Mvc.ActionResult ListByCategory(string categorySlug, string query, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortOrder> order, WebPlex.Applications.CompactStore.Mvc.UrlToken<WebPlex.Applications.CompactStore.Models.SortDirection> direction, int? page, int? size)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListByCategory);
		if (categorySlug != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categorySlug", categorySlug);
		if (query != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "query", query);
		if (order != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "order", order);
		if (direction != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "direction", direction);
		if (page != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
		if (size != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "size", size);
            ListByCategoryOverride(callInfo, categorySlug, query, order, direction, page, size);
            return callInfo;
        }

        [NonAction]
        partial void DetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string categorySlug, string productSlug);

        [NonAction]
        public override System.Web.Mvc.ActionResult Details(string categorySlug, string productSlug)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Details);
		if (categorySlug != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categorySlug", categorySlug);
		if (productSlug != null)
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "productSlug", productSlug);
            DetailsOverride(callInfo, categorySlug, productSlug);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108
